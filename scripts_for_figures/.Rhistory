Sig_mean_1
## read dimensions of data:
r <- length(y[1, ])
N <- length(y[, 1])
M = 10000
Sigma_array = array(0, dim = c(M, r, r))
Inv_Sigma_array = array(0, dim = c(M, r, r))
C0_array = array(0, dim = c(M, r, r))
C0_j <- matrix(0, r, r)
Sigma_j <- matrix(0, r, r)
Sigma_prior<- list()
Sigma_prior$coef = 1
R <- apply(y, 2, function(x) diff(range(x)))
# prior on Sigma_k [modification for sensitivity analysis with R/5, R/10, R/20]
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
R_mod
r <- length(y[1, ])
N <- length(y[, 1])
M = 10000
Sigma_array = array(0, dim = c(M, r, r))
Inv_Sigma_array = array(0, dim = c(M, r, r))
C0_array = array(0, dim = c(M, r, r))
C0_j <- matrix(0, r, r)
Sigma_j <- matrix(0, r, r)
Sigma_prior<- list()
Sigma_prior$coef = 1/20
R <- apply(y, 2, function(x) diff(range(x)))
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
R_mod
G0
for (i in 1:10000){
C0_array[i,,] <- rwishart(2 * g0, 0.5 * chol2inv(chol(G0)))$W  #from package 'bayesm'
sig <- rwishart(2 * c0, 0.5 * chol2inv(chol(C0)))  #attention: rwishart(nu,v)(Rossi)=> nu=2*c0,v=0.5*C0, wishart(c0,C0) (FS)
Sigma_array[i, , ] <- sig$IW
Inv_Sigma_array[i, , ] <- sig$W
}
Sig_mean_20 = apply(Sigma_array, c(2,3), mean)
C0_mean_20 = apply(C0_array, c(2,3), mean)
Inv_Sigma_mean_20 = apply(Inv_Sigma_array, c(2,3), mean)
Sig_mean_20v
Sig_mean_2
Sig_mean_20
C0_mean_20
Inv_Sigma_mean_20
## read dimensions of data:
r <- length(y[1, ])
N <- length(y[, 1])
M = 10000
Sigma_array = array(0, dim = c(M, r, r))
Inv_Sigma_array = array(0, dim = c(M, r, r))
C0_array = array(0, dim = c(M, r, r))
C0_j <- matrix(0, r, r)
Sigma_j <- matrix(0, r, r)
Sigma_prior<- list()
Sigma_prior$coef = 1/20
R <- apply(y, 2, function(x) diff(range(x)))
## prior on Sigma_k [modification for sensitivity analysis with R/5, R/10, R/20]
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
for (i in 1:10000){
C0_array[i,,] <- rwishart(2 * g0, 0.5 * chol2inv(chol(G0)))$W  #from package 'bayesm'
sig <- rwishart(2 * c0, 0.5 * chol2inv(chol(C0_array[i,,])))  #attention: rwishart(nu,v)(Rossi)=> nu=2*c0,v=0.5*C0, wishart(c0,C0) (FS)
Sigma_array[i, , ] <- sig$IW
Inv_Sigma_array[i, , ] <- sig$W
}
Sig_mean_20 = apply(Sigma_array, c(2,3), mean)
C0_mean_20 = apply(C0_array, c(2,3), mean)
Inv_Sigma_mean_20 = apply(Inv_Sigma_array, c(2,3), mean)
Sig_mean_20
C0_mean_20
Inv_Sigma_mean_20
data =  loadRData(ds_list[1])
y <- as.matrix(data$y)
#Mmax <- M + burnin
## read dimensions of data:
r <- length(y[1, ])
N <- length(y[, 1])
M = 10000
Sigma_array = array(0, dim = c(M, r, r))
Inv_Sigma_array = array(0, dim = c(M, r, r))
C0_array = array(0, dim = c(M, r, r))
C0_j <- matrix(0, r, r)
Sigma_j <- matrix(0, r, r)
Sigma_prior<- list()
Sigma_prior$coef = 1/5
R <- apply(y, 2, function(x) diff(range(x)))
## prior on Sigma_k [modification for sensitivity analysis with R/5, R/10, R/20]
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
for (i in 1:10000){
C0_array[i,,] <- rwishart(2 * g0, 0.5 * chol2inv(chol(G0)))$W  #from package 'bayesm'
sig <- rwishart(2 * c0, 0.5 * chol2inv(chol(C0_array[i,,])))  #attention: rwishart(nu,v)(Rossi)=> nu=2*c0,v=0.5*C0, wishart(c0,C0) (FS)
Sigma_array[i, , ] <- sig$IW
Inv_Sigma_array[i, , ] <- sig$W
}
Sig_mean_5 = apply(Sigma_array, c(2,3), mean)
C0_mean_5 = apply(C0_array, c(2,3), mean)
Inv_Sigma_mean_5 = apply(Inv_Sigma_array, c(2,3), mean)
Sig_mean_5
C0_mean_5
Sig_mean_20
data =  loadRData(ds_list[1])
y <- as.matrix(data$y)
#Mmax <- M + burnin
## read dimensions of data:
r <- length(y[1, ])
N <- length(y[, 1])
M = 10000
Sigma_array = array(0, dim = c(M, r, r))
Inv_Sigma_array = array(0, dim = c(M, r, r))
C0_array = array(0, dim = c(M, r, r))
C0_j <- matrix(0, r, r)
Sigma_j <- matrix(0, r, r)
Sigma_prior<- list()
Sigma_prior$coef = 1
R <- apply(y, 2, function(x) diff(range(x)))
## prior on Sigma_k [modification for sensitivity analysis with R/5, R/10, R/20]
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
for (i in 1:10000){
C0_array[i,,] <- rwishart(2 * g0, 0.5 * chol2inv(chol(G0)))$W  #from package 'bayesm'
sig <- rwishart(2 * c0, 0.5 * chol2inv(chol(C0_array[i,,])))  #attention: rwishart(nu,v)(Rossi)=> nu=2*c0,v=0.5*C0, wishart(c0,C0) (FS)
Sigma_array[i, , ] <- sig$IW
Inv_Sigma_array[i, , ] <- sig$W
}
Sig_mean_1 = apply(Sigma_array, c(2,3), mean)
C0_mean_1 = apply(C0_array, c(2,3), mean)
Inv_Sigma_mean_1 = apply(Inv_Sigma_array, c(2,3), mean)
Sig_mean_1
C0_mean_1
Inv_Sigma_mean_1
## read dimensions of data:
r <- length(y[1, ])
N <- length(y[, 1])
M = 10000
Sigma_array = array(0, dim = c(M, r, r))
Inv_Sigma_array = array(0, dim = c(M, r, r))
C0_array = array(0, dim = c(M, r, r))
C0_j <- matrix(0, r, r)
Sigma_j <- matrix(0, r, r)
Sigma_prior<- list()
Sigma_prior$coef = 1
R <- apply(y, 2, function(x) diff(range(x)))
## prior on Sigma_k [modification for sensitivity analysis with R/5, R/10, R/20]
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
for (i in 1:10000){
C0_array[i,,] <- rwishart(2 * g0, 0.5 * chol2inv(chol(G0)))$W  #from package 'bayesm'
sig <- rwishart(2 * c0, 0.5 * chol2inv(chol(C0_array[i,,])))  #attention: rwishart(nu,v)(Rossi)=> nu=2*c0,v=0.5*C0, wishart(c0,C0) (FS)
Sigma_array[i, , ] <- sig$IW
Inv_Sigma_array[i, , ] <- sig$W
}
Sig_mean_1 = apply(Sigma_array, c(2,3), mean)
C0_mean_1 = apply(C0_array, c(2,3), mean)
Inv_Sigma_mean_1 = apply(Inv_Sigma_array, c(2,3), mean)
Sig_mean_1
C0_mean_1
Inv_Sigma_mean_1
det(Sig_mean_1)
?determinant(Sig_mean)
det(Sig_mean_1)
det(Sig_mean_20)
det(Sig_mean_5)
ds_list<- c("~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_20.RData","~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_200.RData",
"~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_2000.RData","~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_20000.RData")
data =  loadRData(ds_list[4])
y <- as.matrix(data$y)
## read dimensions of data:
r <- length(y[1, ])
N <- length(y[, 1])
M = 10000
Sigma_array = array(0, dim = c(M, r, r))
Inv_Sigma_array = array(0, dim = c(M, r, r))
C0_array = array(0, dim = c(M, r, r))
C0_j <- matrix(0, r, r)
Sigma_j <- matrix(0, r, r)
Sigma_prior<- list()
Sigma_prior$coef = 1
R <- apply(y, 2, function(x) diff(range(x)))
R
# prior on Sigma_k [modification for sensitivity analysis with R/5, R/10, R/20]
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
for (i in 1:10000){
C0_array[i,,] <- rwishart(2 * g0, 0.5 * chol2inv(chol(G0)))$W  #from package 'bayesm'
sig <- rwishart(2 * c0, 0.5 * chol2inv(chol(C0_array[i,,])))  #attention: rwishart(nu,v)(Rossi)=> nu=2*c0,v=0.5*C0, wishart(c0,C0) (FS)
Sigma_array[i, , ] <- sig$IW
Inv_Sigma_array[i, , ] <- sig$W
}
Sig_mean_1 = apply(Sigma_array, c(2,3), mean)
C0_mean_1 = apply(C0_array, c(2,3), mean)
Inv_Sigma_mean_1 = apply(Inv_Sigma_array, c(2,3), mean)
Sig_mean_1
C0_mean_1
Sigma_prior$coef = 1/5
## prior on Sigma_k [modification for sensitivity analysis with R/5, R/10, R/20]
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
for (i in 1:10000){
C0_array[i,,] <- rwishart(2 * g0, 0.5 * chol2inv(chol(G0)))$W  #from package 'bayesm'
sig <- rwishart(2 * c0, 0.5 * chol2inv(chol(C0_array[i,,])))  #attention: rwishart(nu,v)(Rossi)=> nu=2*c0,v=0.5*C0, wishart(c0,C0) (FS)
Sigma_array[i, , ] <- sig$IW
Inv_Sigma_array[i, , ] <- sig$W
}
Sig_mean_1 = apply(Sigma_array, c(2,3), mean)
C0_mean_1 = apply(C0_array, c(2,3), mean)
Inv_Sigma_mean_1 = apply(Inv_Sigma_array, c(2,3), mean)
Sig_mean_1
Sigma_prior$coef = 1/20
r <- length(y[1, ])
N <- length(y[, 1])
M = 10000
Sigma_array = array(0, dim = c(M, r, r))
Inv_Sigma_array = array(0, dim = c(M, r, r))
C0_array = array(0, dim = c(M, r, r))
C0_j <- matrix(0, r, r)
Sigma_j <- matrix(0, r, r)
Sigma_prior<- list()
Sigma_prior$coef = 1/20
R <- apply(y, 2, function(x) diff(range(x)))
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
for (i in 1:10000){
C0_array[i,,] <- rwishart(2 * g0, 0.5 * chol2inv(chol(G0)))$W  #from package 'bayesm'
sig <- rwishart(2 * c0, 0.5 * chol2inv(chol(C0_array[i,,])))  #attention: rwishart(nu,v)(Rossi)=> nu=2*c0,v=0.5*C0, wishart(c0,C0) (FS)
Sigma_array[i, , ] <- sig$IW
Inv_Sigma_array[i, , ] <- sig$W
}
Sig_mean_1 = apply(Sigma_array, c(2,3), mean)
C0_mean_1 = apply(C0_array, c(2,3), mean)
Inv_Sigma_mean_1 = apply(Inv_Sigma_array, c(2,3), mean)
Sig_mean_1
C0_mean_1
Inv_Sigma_mean_1
data =  loadRData(ds_list[4])
y <- as.matrix(data$y)
C0 <- 0.75 * cov(y)
C0
data =  loadRData(ds_list[3])
C0 <- 0.75 * cov(y)
C0
data =  loadRData(ds_list[3])
y <- as.matrix(data$y)
C0 <- 0.75 * cov(y)
C0
data =  loadRData(ds_list[4])
C0 <- 0.75 * cov(y)
y <- as.matrix(data$y)
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
C0
knitr::opts_chunk$set(echo = TRUE)
Mat = compute_Sigma(M=10000, coef_R = 1, y)
compute_Sigma<- function(M, coef_R, y){
r <- length(y[1, ])
N <- length(y[, 1])
Sigma_array = array(0, dim = c(M, r, r))
Inv_Sigma_array = array(0, dim = c(M, r, r))
C0_array = array(0, dim = c(M, r, r))
C0_j <- matrix(0, r, r)
Sigma_j <- matrix(0, r, r)
R <- apply(y, 2, function(x) diff(range(x)))
## prior on Sigma_k [modification for sensitivity analysis with R/5, R/10, R/20]
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
R_mod = R*coef_R
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
for (i in 1:M){
C0_array[i,,] <- rwishart(2 * g0, 0.5 * chol2inv(chol(G0)))$W  #from package 'bayesm'
sig <- rwishart(2 * c0, 0.5 * chol2inv(chol(C0_array[i,,])))  #attention: rwishart(nu,v)(Rossi)=> nu=2*c0,v=0.5*C0, wishart(c0,C0) (FS)
Sigma_array[i, , ] <- sig$IW
Inv_Sigma_array[i, , ] <- sig$W
}
Sig_mean = apply(Sigma_array, c(2,3), mean)
C0_mean = apply(C0_array, c(2,3), mean)
Inv_Sigma_mean = apply(Inv_Sigma_array, c(2,3), mean)
return(list(S=  Sig_mean,C0 = C0_mean, InvS = Inv_Sigma_mean ))
}
Mat = compute_Sigma(M=10000, coef_R = 1, y)
Mat = compute_Sigma(M=10000, coef_R = 1, y)
Mat$S
Mat$S
Mat$C0
Mat$InvS
Mat5 = compute_Sigma(M=10000, coef_R = 1/5, y)
Mat5$S
Mat5$C0
Mat5$InvS
Mat20 = compute_Sigma(M=10000, coef_R = 1/20, y)
Mat20$S
Mat20$C0
Mat20$InvS
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Random_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Estimation_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Identification_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Gibbs_sampling_function.R")
ds_list<- c("~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_20.RData","~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_200.RData",
"~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_2000.RData","~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_20000.RData")
data =  loadRData(ds_list[4])
y <- as.matrix(data$y)
det(Mat20$S)
det(Mat5$S)
det(Mat20$S)
Sigma_prior = NULL
fixedS =NULL
(is.null(Sigma_prior)&is.null(fixedS))
if (is.null(Sigma_prior)){
R_mod = R
}else{
R_mod = R*Sigma_prior$coef
}
if (is.null(Sigma_prior)){
R_mod = R
print(1)
}else{
R_mod = R*Sigma_prior$coef
}
if (is.null(fixedS)){
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
print(1)
}else{
c0 <- 2.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
C0 <- (c0/100)* diag((R_mod^2))
}
if (is.null(fixedS)){
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
print(R_mod)
}else{
c0 <- 2.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
C0 <- (c0/100)* diag((R_mod^2))
}
R
#### sensitivity with a fixed Sigma prior
ds_list_short <- c("~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_20.RData","~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_200.RData",
"~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_2000.RData")
df_sens_fixed <-comparison_sens(ds_list_short, alpha = 0.01,K_ = 10, M_it= 1000 , nburn = 100, coef_R =1, fixedS = TRUE)
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Utils_post.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Estimation_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Gibbs_sampling_function.R")
df_sens_fixed <-comparison_sens(ds_list_short, alpha = 0.01,K_ = 10, M_it= 1000 , nburn = 100, coef_R =1, fixedS = TRUE)
fixS = NULL
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Gibbs_sampling_function.R")
df_sens_fixed <-comparison_sens(ds_list_short, alpha = 0.01,K_ = 10, M_it= 1000 , nburn = 100, coef_R =1, fixS  = TRUE)
df_sens_fixed
df_sens_fixed$line
save(df_sens_fixed, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed1.RData")
plt_fig1(input_file= "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed1.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/" ,Sigma_coef = 1)
df_sens_fixed <-comparison_sens(ds_list_short, alpha = 0.01,K_ = 10, M_it= 20000 , nburn = 10000, coef_R =1, fixS  = TRUE)
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/plt_Fig1_short.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/plt_Fig1_short.R")
save(df_sens_fixed, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed1.RData")
plt_fig1_short(input_file= "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed1.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/" ,Sigma_coef = 1)
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/plt_Fig1_short.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/plt_Fig1_short.R")
plt_fig1_short(input_file= "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed1.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/" ,Sigma_coef = 1)
ds_list_short <- c("~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_20.RData","~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_200.RData",
"~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_2000.RData")
alpha = 0.01
K_ = 10
M_it= 20000
nburn = 10000
coef_R =1/5
fixS  = TRUE
pk<- list()
N<- c()
R_h <- c()
W_non_sorted <- list()
W <- list()
Mu_mat <- list()
S_mat<- list()
Sigma_prior<- list()
Sigma_prior$coef = coef_R
e0=alpha
K=K_
M=M_it
burnin=nburn
Sigma_prior= Sigma_prior
fixedS = fixS
fixedS
Sigma_prior
e0
print(seed_)
y <- as.matrix(data$y)
#Mmax <- M + burnin
## read dimensions of data:
r <- length(y[1, ])
N <- length(y[, 1])
r
N
## Dirichlet parameter for the mixture weights
## variance of the normal proposal for the MH step for estimating e0
c_proposal <- 0.8
R <- apply(y, 2, function(x) diff(range(x)))
R
if (is.null(Sigma_prior)){
R_mod = R
}else{
R_mod = R*Sigma_prior$coef
}
R_mod
if (is.null(fixedS)){
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
}else{
c0 <- 2.5 + (r - 1)/2
R_mod = R*Sigma_prior$coef
C0 <- (c0/100)* diag((R_mod^2))
}
c)
c0
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Gibbs_sampling_function.R")
if (is.null(fixedS)){
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
}else{
c0 <- 2.5 + (r - 1)/2
C0 <- (c0/100)* diag((R_mod^2))
}
Co0
C0
(is.null(fixedS))
C0 <- 0.75 * cov(y)
C0
if (is.null(fixedS)){
c0 <- 2.5 + (r - 1)/2
C0 <- 0.75 * cov(y)
g0 <- 0.5 + (r - 1)/2
G0 <- 100 * g0/c0 * diag((1/R_mod^2))
}else{
c0 <- 2.5 + (r - 1)/2
C0 <- (c0/100)* diag((R_mod^2))
}
C0
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Estimation_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Gibbs_sampling_function.R")
df_sens_fixed_5 <-comparison_sens(ds_list_short, alpha = 0.01,K_ = 10, M_it= 20000 , nburn = 10000, coef_R =1/5, fixS  = TRUE)
save(df_sens_fixed_5, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed5.RData")
plt_fig1_short(input_file= "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed5.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/" ,Sigma_coef = 1/5)
df_sens_fixed_5$line$Rh
df_sens_fixed$line$Rh
df_sens_fixed_20 <-comparison_sens(ds_list_short, alpha = 0.01,K_ = 10, M_it= 20000 , nburn = 10000, coef_R =1/20, fixS  = TRUE)
save(df_sens_fixed_20, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed20.RData")
plt_fig1_short(input_file= "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed20.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/" ,Sigma_coef = 1/20)
plt_fig1_short(input_file= "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed20.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/" ,Sigma_coef = 1/20)
plt_fig1_short(input_file= "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed20.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/" ,Sigma_coef = 1/20)
plt_fig1_short(input_file= "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed20.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/" ,Sigma_coef = 1/20)
df_sens_fixed_20$line$Rh
rm(list=ls())
setwd("~/Documents/GitHub/BNPconsistency/scripts_for_figures")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Random_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Estimation_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Identification_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Gibbs_sampling_function.R")
require(tidyr)
require(e1071)
require(MCMCpack)
require(mvtnorm)
require(Runuran)
require(flexclust)
library(cowplot)
library(ggplot2)
#---------- B) Specif
df_sens_fixed_1 <-comparison_sens(ds_list_short, alpha = 0.01,K_ = 10, M_it= 20000 , nburn = 10000, coef_R =1, fixS  = TRUE)
ds_list_short <- c("~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_20.RData","~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_200.RData",
"~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_2000.RData")
df_sens_fixed_5 <-comparison_sens(ds_list_short, alpha = 0.01,K_ = 10, M_it= 20000 , nburn = 10000, coef_R =1/5, fixS  = TRUE)
save(df_sens_fixed_5, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens_fixed5.RData")
