df$sigma<- sigma_df
for(l in (1: nrow(df))){
df$val[l]<- prob_py(df$k[l],npoints=50,theta=1,sigma=df$sigma[l])
}
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title="Kn"),yaxis= list(title="sigma"), zaxis= list(title="Probability")))
p
##########Dir
#####################################################################################################################
sigma_df <- rep(seq(0.2,0.8, by=0.1), each=50)
k_df<- rep(1:50, 7)
df<- as.data.frame(matrix(NA, nrow=350, ncol=1))
df$k<- k_df
df$sigma<- sigma_df
for(l in (1: nrow(df))){
df$val[l]<- prob_py(df$k[l],npoints=50,theta=1,sigma=df$sigma[l])
}
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title="Kn"),yaxis= list(title="sigma"), zaxis= list(title="Probability")))
p
p
###################################################################################################################
sigma_df <- rep(seq(0.2,0.8, by=0.1), each=50)
k_df<- rep(1:50, 7)
df<- as.data.frame(matrix(NA, nrow=350, ncol=1))
df$k<- k_df
df$sigma<- sigma_df
for(l in (1: nrow(df))){
df$val[l]<- prob_py(df$k[l],npoints=50,theta=1,sigma=df$sigma[l])
}
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title="Kn"),yaxis= list(title="sigma"), zaxis= list(title="Probability")))
p
##########
df$val
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title="Kn"),yaxis= list(title="sigma"), zaxis= list(title="Probability")))
p
sigma_df <- rep(seq(0.2,0.8, by=0.6/9), each=50)
k_df<- rep(1:50, 10)
df<- as.data.frame(matrix(NA, nrow=500, ncol=1))
df$k<- k_df
df$sigma<- round(sigma_df,2)
for(l in (1: nrow(df))){
df$val[l]<- prob_py(df$k[l],npoints=50,theta=1,sigma=df$sigma[l])
}
ax <- list(title = "",zeroline = FALSE,showline = FALSE,showticklabels = FALSE,showgrid = FALSE)
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= ax,yaxis= ax, zaxis= ax,xaxis=ax))
p
sigma_df <- rep(seq(0.2,0.8, by=0.6/9), each=50)
k_df<- rep(1:50, 10)
df<- as.data.frame(matrix(NA, nrow=500, ncol=1))
df$k<- k_df
df$sigma<- round(sigma_df,2)
for(l in (1: nrow(df))){
df$val[l]<- prob_py(df$k[l],npoints=50,theta=1,sigma=df$sigma[l])
}
ax <- list(title = "",zeroline = FALSE,showline = FALSE,showticklabels = FALSE,showgrid = FALSE)
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= ax,yaxis= ax, zaxis= ax,xaxis=ax))
p
rm(list=ls())
library(pracma)
library(Brobdingnag)
library(copula)
library(reshape)
library(tidyr)
library(ggplot2)
library(plotly)
#####Prior distribution on the number of groups.
kval<-10
theta<-1
sigma<-0.5
############### V for PY########################
v_py<- function(kval, sigma,theta,npoints){
c_v<-1:(kval-1)
v_nk<- (theta +sigma*c_v)
Vup<- prod(v_nk)
n_vec<- 1:(npoints-1)
Vlow<- prod(theta +n_vec)
V_t_nk<-Vup/Vlow
return(V_t_nk)
}
###############Generalized coefficient########################
gen_fac_coef<-function(kval,sigma,npoints){
sum<-0
kfac<-factorial(kval)
for(i in (0:kval)){
n_vec<- 0:(npoints-1)
sn<- prod(-i*sigma +n_vec)
ckn<- choose(kval,i)
sum<- sum + ((-1)^i)*ckn*sn
}
sumf<- sum/kfac
return(sumf)
}
############### V for NGG########################
v_ng<- function(beta, sigma, kval, npoints){
sum<-0
coef_low<-gamma(npoints)
coef_high<-exp(beta)* sigma^(kval-1)
coef<- coef_high/coef_low
for(i in (0:(npoints-1))){
gn<- gammainc(kval - i/sigma,beta)[2]
#gn<- gamma_inc(kval - i/sigma,beta)
ckn<- choose(npoints-1,i)
sum<- sum + ((-1)^i)*(beta^(i/sigma))*ckn*gn
}
sumf<- sum/coef
return(sumf)
}
########### density for  NGG #############################
prob_ng<- function(kg, npoints, sigma, beta){
pb_v<- v_ng(beta, sigma, kg, npoints)
pb_gen<- gen_fac_coef(kg,sigma, npoints)
prob<- (pb_v*pb_gen)/(sigma^kg)
return(prob)
}
########### density for PY#############################
prob_py<- function(kg, npoints, sigma, theta){
pb_v<- v_py(kg,sigma, theta,npoints)
pb_gen<- gen_fac_coef(kg,sigma, npoints)
prob<- (pb_v*pb_gen)/(sigma^kg)
return(prob)
}
########### density for Dirichlet#############################
prob_dir<- function(k, npoints, theta){
n_vec<- 0:(npoints-1)
theta_n<- prod(theta +n_vec)
prob<- ((theta^k) *(abs(Stirling1(npoints,k))))/theta_n
return(prob)
}
prob_dir_large_dim<- function(k, npoints, theta){
n_vec<-as.brob( 0:(npoints-1))
theta_n<- prod(theta +n_vec)
stir<- as.brob(abs(Stirling1(npoints,k)))
powerk<- as.brob((theta^k))
prob_brob<- powerk*(stir/theta_n)
prob<- as.numeric(prob_brob)
return(prob)
}
npoints = 200
####################################################################################################################
#############################Plotting###############################################################################
k_vec<-seq(1,50,by=49/9)
sigma_vec<-seq(0.2,0.8, by=0.6/9)
z<- outer(k_vec,sigma_vec,Vectorize(prob_py),npoints=50, theta=1)
p<- plot_ly(showscale = TRUE) %>%
add_surface(x=k_vec, y=sigma_vec,z =z, cmin = min(z), cmax = max(z),colorbar=list(title='PY'), colorscale = list(c(0,1),c("rgb(255,112,184)","rgb(128,0,64)")),opacity = 0.98) %>%
layout(title="Prior distribution", scene = list(xaxis= list(title="K"),yaxis= list(title="sigma"),zaxis= list(title="N",range = c(min(z),max(z)))))
p
sigma_df <- rep(seq(0.2,0.8, by=0.1), each=50)
k_df<- rep(1:50, 7)
df<- as.data.frame(matrix(NA, nrow=350, ncol=1))
df$k<- k_df
df$sigma<- sigma_df
for(l in (1: nrow(df))){
df$val[l]<- prob_py(df$k[l],npoints=50,theta=1,sigma=df$sigma[l])
}
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title="Kn"),yaxis= list(title="sigma"), zaxis= list(title="Probability")))
p
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title=TeX(sprintf('$K$'))),yaxis= list(title=TeX(sprintf('$\sigma$'))), zaxis= list(title="Probability")))
library(ggplot2)
library(latex2exp)
library(gridExtra)
library(cowplot)
library(grid)
library(RColorBrewer)
library(viridis)
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title=TeX(sprintf('$K$'))),yaxis= list(title=TeX(sprintf('$\sigma$'))), zaxis= list(title="Probability")))
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title=TeX(sprintf('$K$'))),yaxis= list(title=TeX(sprintf('$sigma$'))), zaxis= list(title="Probability")))
p
#####
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= TeX(sprintf('$K$')),yaxis= list(title=TeX(sprintf('$sigma$'))), zaxis= list(title="Probability")))
p
TeX(sprintf('$K$'))
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title'K')),yaxis= list(title='sigma')), zaxis= list(title="Probability")))
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title'K')),yaxis= list(title='sigma'), zaxis= list(title="Probability")))
sigma_df <- rep(seq(0.2,0.8, by=0.1), each=50)
k_df<- rep(1:50, 7)
df<- as.data.frame(matrix(NA, nrow=350, ncol=1))
df$k<- k_df
df$sigma<- sigma_df
for(l in (1: nrow(df))){
df$val[l]<- prob_py(df$k[l],npoints=50,theta=1,sigma=df$sigma[l])
}
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title="Kn"),yaxis= list(title="sigma"), zaxis= list(title="Probability")))
p
sorted_weights  = sort(p, decreasing = TRUE, index.return=TRUE)
rm(list=ls())
setwd("~/Documents/GitHub/BNPconsistency/scripts_for_figures")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Random_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Estimation_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Identification_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Gibbs_sampling_function.R")
require(tidyr)
require(e1071)
require(MASS)
require(MCMCpack)
require(mvtnorm)
require(Runuran)
require(flexclust)
library(cowplot)
library(ggplot2)
ds_list<- c("~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_20.RData","~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_200.RData",
"~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_2000.RData","~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_20000.RData")
alpha = 0.01
K_ = 10
M_it= 50
nburn = 10
coef_R =1/5
pk<- list()
N<- c()
R_h <- c()
W_non_sorted <- list()
W <- list()
Mu_mat <- list()
S_mat<- list()
Sigma_prior<- list()
Sigma_prior$coef = coef_R
for (i in 1:length(ds_list)){
data =  loadRData(ds_list[i])
pk[[i]] <- MCMC_function(data, e0=alpha, K=K_, M=M_it, burnin=nburn, Sigma_prior= Sigma_prior )
N[i]<- dim(data$y)[1]
Eta_<- matrix(NA, nrow =dim(pk[[i]]$Eta)[1],ncol =  dim(pk[[i]]$Eta)[2] )
for (j in 1:dim(pk[[i]]$Eta)[1]){ Eta_[j,] <- sort(pk[[i]]$Eta[j,],decreasing = TRUE)}
W[[i]] <- Eta_
W_non_sorted[[i]] <- pk[[i]]$Eta
Mu_mat[[i]] <- pk[[i]]$Mu
S_mat[[i]] <-pk[[i]]$Sigma
}
df_ = tibble(K= 1:K_)
df2_ = tibble(K= 1:K_)
df3_ = tibble(K= 1:K_)
df4_ = tibble(K= 1:K_)
df_
for (j in 1:length(ds_list)){
name_ <- paste("Pkn_", j, sep = "")
name2_ <- paste("Rh_", j, sep = "")
name3_ <- paste("N_", j, sep = "")
name4_ <- paste("W_", j, sep = "")
df_[,name_]<- pk[[j]]$p_k
df2_[,name2_]<- rep(pk[[j]]$ll_rhat,length(pk[[j]]$p_k))
df3_[,name3_]<- rep(N[j],length(pk[[j]]$p_k))
df4_[,name4_]<- rep(N[j],length(pk[[j]]$p_k))
}
df_
for (j in 1:length(ds_list)){
name_ <- paste("Pkn_", j, sep = "")
name2_ <- paste("Rh_", j, sep = "")
name3_ <- paste("N_", j, sep = "")
name4_ <- paste("W_", j, sep = "")
df_[,name_]<- pk[[j]]$p_k
df2_[,name2_]<- rep(pk[[j]]$ll_rhat,length(pk[[j]]$p_k))
df3_[,name3_]<- rep(N[j],length(pk[[j]]$p_k))
df4_[,name4_]<- rep(N[j],length(pk[[j]]$p_k))
}
df = df_%>% gather(Process_type, density,  paste("Pkn_", 1, sep = ""):paste("Pkn_", length(ds_list), sep = ""))
df2 = df2_%>% gather(Rh, Rh_val,  paste("Rh_", 1, sep = ""):paste("Rh_", length(ds_list), sep = ""))
df3 = df3_%>% gather(N_, N_val,  paste("N_", 1, sep = ""):paste("N_", length(ds_list), sep = ""))
df4 = df4_%>% gather(W_, W_val,  paste("W_", 1, sep = ""):paste("W_", length(ds_list), sep = ""))
W_df <- do.call(cbind, W)
df4_post <- cbind(df4,t(W_df))
df4_post_ <- gather(df4_post, key = "it",value="weights", 4: dim(df4_post)[2])
df$alpha = c(rep(alpha,dim(df_)[1]*length(ds_list)))
df$Rh = df2$Rh_val
df$N =df3$N_val
df_l_ = tibble(K= 1:((M_it)*2))
df2_l_ = tibble(K= 1:((M_it)*2))
df3_l_ = tibble(K= 1:((M_it)*2))
for (j in 1:length(ds_list)){
name_ <- paste("P_", j, sep = "")
name2_ <- paste("Rh_", j, sep = "")
name3_ <- paste("N_", j, sep = "")
df_l_[,name_]<- pk[[j]]$p_k_all
df2_l_[,name2_]<- rep(pk[[j]]$ll_rhat,length(pk[[j]]$p_k_all))
df3_l_[,name3_]<- rep(N[j],length(pk[[j]]$p_k_all))
}
df_l = df_l_%>% gather(Process_type, density,  paste("P_", 1, sep = ""):paste("P_", length(ds_list), sep = ""))
df_l2 = df2_l_%>% gather(Rh, Rh_val,  paste("Rh_", 1, sep = ""):paste("Rh_", length(ds_list), sep = ""))
df_l3 = df3_l_%>% gather(N_, N_val,  paste("N_", 1, sep = ""):paste("N_", length(ds_list), sep = ""))
df_l$alpha = c(rep(alpha,(M_it)*2*length(ds_list)))
df_l$Rh = df_l2$Rh_val
df_l$N =df_l3$N_val
df_l
comparison_sens<- function(ds_list, alpha,K_, M_it, nburn, coef_R =1){
pk<- list()
N<- c()
R_h <- c()
W_non_sorted <- list()
W <- list()
Mu_mat <- list()
S_mat<- list()
Sigma_prior<- list()
Sigma_prior$coef = coef_R
for (i in 1:length(ds_list)){
data =  loadRData(ds_list[i])
pk[[i]] <- MCMC_function(data, e0=alpha, K=K_, M=M_it, burnin=nburn, Sigma_prior= Sigma_prior )
N[i]<- dim(data$y)[1]
Eta_<- matrix(NA, nrow =dim(pk[[i]]$Eta)[1],ncol =  dim(pk[[i]]$Eta)[2] )
for (j in 1:dim(pk[[i]]$Eta)[1]){ Eta_[j,] <- sort(pk[[i]]$Eta[j,],decreasing = TRUE)}
W[[i]] <- Eta_
W_non_sorted[[i]] <- pk[[i]]$Eta
Mu_mat[[i]] <- pk[[i]]$Mu
S_mat[[i]] <-pk[[i]]$Sigma
}
df_ = tibble(K= 1:K_)
df2_ = tibble(K= 1:K_)
df3_ = tibble(K= 1:K_)
df4_ = tibble(K= 1:K_)
for (j in 1:length(ds_list)){
name_ <- paste("Pkn_", j, sep = "")
name2_ <- paste("Rh_", j, sep = "")
name3_ <- paste("N_", j, sep = "")
name4_ <- paste("W_", j, sep = "")
df_[,name_]<- pk[[j]]$p_k
df2_[,name2_]<- rep(pk[[j]]$ll_rhat,length(pk[[j]]$p_k))
df3_[,name3_]<- rep(N[j],length(pk[[j]]$p_k))
df4_[,name4_]<- rep(N[j],length(pk[[j]]$p_k))
}
df = df_%>% gather(Process_type, density,  paste("Pkn_", 1, sep = ""):paste("Pkn_", length(ds_list), sep = ""))
df2 = df2_%>% gather(Rh, Rh_val,  paste("Rh_", 1, sep = ""):paste("Rh_", length(ds_list), sep = ""))
df3 = df3_%>% gather(N_, N_val,  paste("N_", 1, sep = ""):paste("N_", length(ds_list), sep = ""))
df4 = df4_%>% gather(W_, W_val,  paste("W_", 1, sep = ""):paste("W_", length(ds_list), sep = ""))
W_df <- do.call(cbind, W)
df4_post <- cbind(df4,t(W_df))
df4_post_ <- gather(df4_post, key = "it",value="weights", 4: dim(df4_post)[2])
df$alpha = c(rep(alpha,dim(df_)[1]*length(ds_list)))
df$Rh = df2$Rh_val
df$N =df3$N_val
df_l_ = tibble(K= 1:((M_it)*2))
df2_l_ = tibble(K= 1:((M_it)*2))
df3_l_ = tibble(K= 1:((M_it)*2))
for (j in 1:length(ds_list)){
name_ <- paste("P_", j, sep = "")
name2_ <- paste("Rh_", j, sep = "")
name3_ <- paste("N_", j, sep = "")
df_l_[,name_]<- pk[[j]]$p_k_all
df2_l_[,name2_]<- rep(pk[[j]]$ll_rhat,length(pk[[j]]$p_k_all))
df3_l_[,name3_]<- rep(N[j],length(pk[[j]]$p_k_all))
}
df_l = df_l_%>% gather(Process_type, density,  paste("P_", 1, sep = ""):paste("P_", length(ds_list), sep = ""))
df_l2 = df2_l_%>% gather(Rh, Rh_val,  paste("Rh_", 1, sep = ""):paste("Rh_", length(ds_list), sep = ""))
df_l3 = df3_l_%>% gather(N_, N_val,  paste("N_", 1, sep = ""):paste("N_", length(ds_list), sep = ""))
df_l$alpha = c(rep(alpha,(M_it)*2*length(ds_list)))
df_l$Rh = df_l2$Rh_val
df_l$N =df_l3$N_val
return(list(line = df, hist =df_l, weights = df4_post_, eta = W_non_sorted, mu = Mu_mat, sig = S_mat))
}
df_l2
df_l
df_l3
df_l
rm(list=ls())
setwd("~/Documents/GitHub/BNPconsistency/scripts_for_figures")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Random_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Estimation_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Code_SP_Mix/Identification_SpMix.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Gibbs_sampling_function.R")
require(tidyr)
require(e1071)
require(MASS)
require(MCMCpack)
require(mvtnorm)
require(Runuran)
require(flexclust)
library(cowplot)
library(ggplot2)
ds_list<- c("~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_20.RData","~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_200.RData",
"~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_2000.RData","~/Documents/GitHub/BNPconsistency/scripts_for_figures/sim_data/GM_3_20000.RData")
df_sens_1 <-comparison_sens(ds_list, alpha = 0.01,K_ = 10, M_it= 50 , nburn = 10, coef_R =1/5)
df_sens_1 <-comparison_sens(ds_list, alpha = 0.01,K_ = 10, M_it= 10000 , nburn = 5000, coef_R =1/5)
df_sens_2 <-comparison_sens(ds_list, alpha = 0.01,K_ = 10, M_it= 10000 , nburn = 5000, coef_R =1/20)
df_sens_1
save(df_sens_1, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens1.RData")
save(df_sens_1, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens1.RData")
save(df_sens_2, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens2.RData")
save(df_sens_2, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens2.RData")
save(df_sens_2, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens2.RData")
save(df_sens_2, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens2.RData")
save(df_sens_2, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens2.RData")
save(df_sens_2, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens2.RData")
df_sens_2 <-comparison_sens(ds_list, alpha = 0.01,K_ = 10, M_it= 10000 , nburn = 5000, coef_R =1/20)
save(df_sens_2, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens2.RData")
save(df_sens_2, file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens2.RData")
df_sens_1
df_sens_1$line
df_sens_2$line
df_sens_1$hist
df_sens_1$line[20:30,]
df_sens_2$line[20:30,]
df_sens_2$line[30:40,]
df_sens_1$line[30:40,]
df_sens_1$line$Rh
df_sens_2$line$Rh
require(e1071)
require(mclust)
require(MASS)
require(bayesm)
require(MCMCpack)
require(mvtnorm)
require(Runuran)
require(flexclust)
library(gridExtra)
library(cowplot)
library(ggplot2)
library(latex2exp)
require(tidyr)
library(dplyr)
library(JuliaCall)
library(viridis)
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Utils_post.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/plt_Figure1.R")
# e0 = 0.01
plt_fig1(input_file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens1.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/" )
plt_fig1(input_file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens1.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/", Sigma_coef = 1/5 )
# e0 =1
plt_fig1(input_file= "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens2.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/", Sigma_coef = 1/20 )
#e0 = 2.5
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/plt_Figure1.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/plt_Figure1.R")
require(e1071)
require(mclust)
require(MASS)
require(bayesm)
require(MCMCpack)
require(mvtnorm)
require(Runuran)
require(flexclust)
library(gridExtra)
library(cowplot)
library(ggplot2)
library(latex2exp)
require(tidyr)
library(dplyr)
library(JuliaCall)
library(viridis)
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Utils_post.R")
require(e1071)
require(mclust)
require(MASS)
require(bayesm)
require(MCMCpack)
require(mvtnorm)
require(Runuran)
require(flexclust)
library(gridExtra)
library(cowplot)
library(ggplot2)
library(latex2exp)
require(tidyr)
library(dplyr)
library(JuliaCall)
library(viridis)
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Utils_post.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/plt_Figure1.R")
# e0 = 0.01
plt_fig1(input_file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens1.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/", Sigma_coef = 1/5 )
# e0 =1
plt_fig1(input_file= "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens2.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/", Sigma_coef = 1/20 )
#e0 = 2.5
require(e1071)
require(mclust)
require(MASS)
require(bayesm)
require(MCMCpack)
require(mvtnorm)
require(Runuran)
require(flexclust)
library(gridExtra)
library(cowplot)
library(ggplot2)
library(latex2exp)
require(tidyr)
library(dplyr)
library(JuliaCall)
library(viridis)
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/Utils_post.R")
source("~/Documents/GitHub/BNPconsistency/scripts_for_figures/plt_Figure1.R")
# e0 = 0.01
plt_fig1(input_file = "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens1.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/", Sigma_coef = 1/5 )
# e0 =1
plt_fig1(input_file= "~/Documents/GitHub/BNPconsistency/saves_for_figures/cmp_fig_sens2.RData", c_vec =c(0.1, 0.5, 1, 2) , fig_path= "~/Documents/GitHub/BNPconsistency/figures/Figure_sens/", Sigma_coef = 1/20 )
#e0 = 2.5
df_sens_1$line$Rh
df_sens_2$line$Rh
df_sens_2$line
df_sens_2$line[30:40,]
df_sens_2$line[20:30,]
