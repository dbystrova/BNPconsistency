setwd("~/Downloads/PCA")
knitr::opts_chunk$set(echo = TRUE)
options(width = 200)
load("beers.pca")
load("beers.pca")
beers.pca
beers.pca$x
plane=c(1,2)
proj=beers.pca$x[,c(1,2)]
names=rownames(proj)
plot(proj)
text(proj, legend=TRUE)
And then when I plot the variables with "plot(beers.pca$x[,1:2])"
plot(beers.pca$x[,1:2])
autoplot(beers.pca)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(beers.pca)
plot(beers.pca$rotation[,1:2])
autoplot(beers.pca, loadings = TRUE)
autoplot(pca_res, scale = 0)
autoplot(beers.pca, scale = 0)
t(t(beers.pca$x %*% t(beers.pca$rotation)) + beers.pca$center)
pca_res <- prcomp(data, scale. = TRUE)
type(data)
typeof(data)
t(t(beers.pca$x %*% t(beers.pca$rotation)) + beers.pca$center)
data = as.dataframe(t(t(beers.pca$x %*% t(beers.pca$rotation)) + beers.pca$center))
data = as.data.frame(t(t(beers.pca$x %*% t(beers.pca$rotation)) + beers.pca$center))
pca_res <- prcomp(data, scale. = TRUE)
autoplot(pca_res)
pca_res <- prcomp(data, scale. = FALSE)
pca_res <- prcomp(data, scale. = FALSE)
autoplot(pca_res, colour = 'Variables')
df <- iris[1:4]
df
pca_res
beers.pca$sdev
beers.pca$rotation
beers.pca$center
beers.pca$scale
beers.pca$x
df <- iris[1:4]
pca_res <- prcomp(df, scale. = TRUE)
autoplot(pca_res)
pca_res
plot(res.pca,choix="var",invisible="quanti.sup")
plot(beers.pca,choix="var",invisible="quanti.sup")
plot(beers.pca,choix="var")
library("FactoMineR")
library("factoextra")
fviz_pca_var(res.pca)
fviz_pca_var(beers.pca)
var=get_pca_var(beers.pca)
fviz_pca_var(beers.pca, col.var = "black")
var=get_pca_var(beers.pca)
fviz_pca_var(beers.pca, col.var = "black")
ggbiplot(beers.pca)
library(ggbiplot)
library(devtools)
install_github("vqv/ggbiplot")
1
beers.pca$var$coord[,1:2]
plot(beers.pca,choix="var",title="",cex=1)
beers.pca$var$coord[,1:2]
beers.pca$var
beers.pca$x
beers.pca$x[,1:2]
plot(beers.pca,choix="var",title="",cex=1)
plot(beers.pca,choix="x",title="",cex=1)
plot(beers.pca$x[,1:2],choix="x",title="",cex=1)
require(ggplot2)
theta <- seq(0,2*pi,length.out = 100)
circle <- data.frame(x = cos(theta), y = sin(theta))
p <- ggplot(circle,aes(x,y)) + geom_path()
loadings <- data.frame(beers.pca$rotation,
.names = row.names(beers.pca$rotation))
p + geom_text(data=loadings,
mapping=aes(x = PC1, y = PC2, label = .names, colour = .names)) +
coord_fixed(ratio=1) +
labs(x = "PC1", y = "PC2")
require(ggplot2)
gr <- plot(resbeers.pca.pca)
gr + theme(panel.grid.major = element_blank(),
plot.title=element_text(size=14, color="blue"),
axis.title = element_text(size=12, color="red"))
gr <- plot(beers.pca)
gr + theme(panel.grid.major = element_blank(),
plot.title=element_text(size=14, color="blue"),
axis.title = element_text(size=12, color="red"))
## To draw classical R graphs
plot(res.pca, graph.type = "classic")
## To draw classical R graphs
plot(beers.pca, graph.type = "classic")
plot(beers.pca, graph.type = "classic")
library(FactoMineR)
plot(beers.pca, graph.type = "classic")
library(FactoMineR)
ls()
rm()
load("beers.pca")
gr <- plot(beers.pca)
gr + theme(panel.grid.major = element_blank(),
plot.title=element_text(size=14, color="blue"),
axis.title = element_text(size=12, color="red"))
gr
## To draw classical R graphs
plot(beers.pca, graph.type = "classic")
library(FactoMineR)
>biplot(beers.pca,xlim=c(-.3,.3),ylim=c(-.3,.3),cex=.7)
>biplot(beers.pca,xlim=c(-.3,.3),ylim=c(-.3,.3),cex=.7)
>biplot(beers.pca)
knitr::opts_chunk$set(echo = TRUE)
options(width = 200)
load("beers.pca")
biplot(beers.pca,xlim=c(-.3,.3),ylim=c(-.3,.3),cex=.7)
biplot(beers.pca)
plot(beers.pca$rotation[,1:2])
rm(list = ls())
library(Rcpp)
evalCpp("2 + 2")
evalCpp("2 + 2")
getwd()
setwd("~/Documents/GitHub/BNPconsistency/scripts_for_figures")
rm(list=ls())
setwd("~/Documents/GitHub/BNPconsistency/scripts_for_figures")
require(e1071)
require(mclust)
require(MASS)
require(bayesm)
require(MCMCpack)
require(mvtnorm)
require(Runuran)
require(flexclust)
library(gridExtra)
library(cowplot)
library(ggplot2)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
fig1 <- loadRData("~/saves_for_figures/cmp_fig1.RData")
fig1 <- loadRData("../saves_for_figures/cmp_fig1.RData")
fig1
fig1$alpha[1,
]
fig1$alpha[1]
fig1$alpha[K]
fig1$alpha[max(fig1$K)]
fig1$alpha[max(fig1$K)]
max(fig1$K)
max(fig1$K)+1
max(fig1$K)+1
fig1$alpha[(max(fig1$K)+1)]
p = ggplot(fig1, aes(x=K, y = density, colour = Process_type)) +
geom_line(aes(linetype =Process_type) )+ xlab(x_lab) + scale_linetype_manual(values=c('solid','solid','solid')) +
ylab('') + ggtitle(TeX(sprintf('$\\alpha =(%2.f, %.2f, %.2f)$,$\\N =%2.f$ ',fig1$alpha[1],fig1$alpha[(max(fig1$K)+1)],fig1$alpha[(2*max(fig1$K)+1)])))
p = ggplot(fig1, aes(x=K, y = density, colour = Process_type)) +
geom_line(aes(linetype =Process_type) ) + scale_linetype_manual(values=c('solid','solid','solid')) +
ylab('') + ggtitle(TeX(sprintf('$\\alpha =(%2.f, %.2f, %.2f)$,$\\N =%2.f$ ',fig1$alpha[1],fig1$alpha[(max(fig1$K)+1)],fig1$alpha[(2*max(fig1$K)+1)])))
install. packages("tinytex")
install.packages("tinytex")
library(tinytex)
p = ggplot(fig1, aes(x=K, y = density, colour = Process_type)) +
geom_line(aes(linetype =Process_type) ) + scale_linetype_manual(values=c('solid','solid','solid')) +
ylab('') + ggtitle(TeX(sprintf('$\\alpha =(%2.f, %.2f, %.2f)$,$\\N =%2.f$ ',fig1$alpha[1],fig1$alpha[(max(fig1$K)+1)],fig1$alpha[(2*max(fig1$K)+1)])))
install.packages("latex2exp")
library(latex2exp)
p = ggplot(fig1, aes(x=K, y = density, colour = Process_type)) +
geom_line(aes(linetype =Process_type) ) + scale_linetype_manual(values=c('solid','solid','solid')) +
ylab('') + ggtitle(TeX(sprintf('$\\alpha =(%2.f, %.2f, %.2f)$,$\\N =%2.f$ ',fig1$alpha[1],fig1$alpha[(max(fig1$K)+1)],fig1$alpha[(2*max(fig1$K)+1)])))
p = ggplot(fig1, aes(x=K, y = density, colour = Process_type)) +
geom_line(aes(linetype =Process_type) ) + scale_linetype_manual(values=c('solid','solid','solid')) +
ylab('') + ggtitle(TeX(sprintf('$\\alpha =(%2.f, %.2f, %.2f)$,$\\N =%2.f$ ',fig1$alpha[1],fig1$alpha[(max(fig1$K)+1)],fig1$alpha[(2*max(fig1$K)+1)],500)))
p
p = ggplot(fig1, aes(x=K, y = density, colour = Process_type)) +
geom_line(aes(linetype =Process_type) ) + scale_linetype_manual(values=c('solid','solid','solid')) +
ylab('') + ggtitle(TeX(sprintf('Posterior distribution for the number of clusters for $\\alpha =(%2.f, %.2f, %.2f)$,$\\N =%2.f$ ',fig1$alpha[1],fig1$alpha[(max(fig1$K)+1)],fig1$alpha[(2*max(fig1$K)+1)],500)))
p = ggplot(fig1, aes(x=K, y = density, colour = Process_type)) +
geom_line(aes(linetype =Process_type) ) + scale_linetype_manual(values=c('solid','solid','solid')) +
ylab('') + ggtitle(TeX(sprintf('Posterior distribution for the number of clusters for $\\alpha =(%2.f, %.2f, %.2f)$,$\\N =%2.f$ ',fig1$alpha[1],fig1$alpha[(max(fig1$K)+1)],fig1$alpha[(2*max(fig1$K)+1)],500)))
p
length(y)
data
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
data <- loadRData("sim_data/GM_3_500.RData")
data
length(data$y)
rm(list=ls())
source("Code_SP_Mix/Random_SpMix.R")
source("Code_SP_Mix/Estimation_SpMix.R")
source("Code_SP_Mix/Identification_SpMix.R")
source("Code_SP_Mix/Gibbs_sampling_function.R")
getwd()
setwd("~/Documents/GitHub/BNPconsistency/scripts_for_figures")
setwd("~/Documents/GitHub/BNPconsistency/scripts_for_figures")
#rm(list=ls())
#setwd("~/Documents/GitHub/BNPconsistency/scripts_for_figures")
## read sources
source("Code_SP_Mix/Random_SpMix.R")
source("Code_SP_Mix/Estimation_SpMix.R")
source("Code_SP_Mix/Identification_SpMix.R")
source("Code_SP_Mix/Gibbs_sampling_function.R")
require(tidyr)
source("Gibbs_sampling_function.R")
source("Gibbs_sampling_function.R")
setwd("~/Documents/GitHub/BNPconsistency/scripts_for_figures")
r
source("Code_SP_Mix/Random_SpMix.R")
source("Code_SP_Mix/Estimation_SpMix.R")
source("Code_SP_Mix/Identification_SpMix.R")
source("Gibbs_sampling_function.R")
source("Gibbs_sampling_function.R")
rm(list=ls())
setwd("~/Documents/GitHub/BNPconsistency/scripts_for_figures")
#rm(list=ls())
#setwd("~/Documents/GitHub/BNPconsistency/scripts_for_figures")
## read sources
source("Code_SP_Mix/Random_SpMix.R")
source("Code_SP_Mix/Estimation_SpMix.R")
source("Code_SP_Mix/Identification_SpMix.R")
source("Gibbs_sampling_function.R")
source("./Gibbs_sampling_function.R")
source("Gibbs_sampling_function.R")
